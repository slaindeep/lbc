# Project Overview

This project is a web application built using various modern technologies and tools. Below is an overview of the technologies used and the folder structure of the project.

## Technologies Used

- **React**: A JavaScript library for building user interfaces.
- **Create React App**: A tool to set up a modern web app by running one command.
- **TypeScript**: A typed superset of JavaScript that compiles to plain JavaScript.
- **Tailwind CSS**: A utility-first CSS framework for rapidly building custom user interfaces.
- **Node.js**: A JavaScript runtime built on Chrome's V8 JavaScript engine.
- **Express**: A minimal and flexible Node.js web application framework.
- **PostCSS**: A tool for transforming CSS with JavaScript plugins.
- **ESLint**: A tool for identifying and reporting on patterns found in ECMAScript/JavaScript code.
- **Webpack**: A module bundler for JavaScript applications.
- **Babel**: A JavaScript compiler.

## Folder Structure

### Description of Folders

- **lbg-corporate/**: The main directory for the project.
  - **.env**: Environment variables for the project.
  - **.gitignore**: Specifies files and directories that should be ignored by Git.
  - **.vs/**: Visual Studio specific settings and files.
  - **build/**: Contains the production build of the app.
    - **asset-manifest.json**: A manifest file for the assets.
    - **index.html**: The main HTML file for the app.
    - **manifest.json**: A file that provides metadata for the app.
    - **robots.txt**: A file that tells web crawlers which pages to crawl.
    - **static/**: Contains static assets like JavaScript, CSS, and images.
  - **package.json**: Contains metadata about the project and its dependencies.
  - **postcss.config.js**: Configuration file for PostCSS.
  - **public/**: Contains public assets and the main HTML file.
    - **index.html**: The main HTML file for the app.
    - **manifest.json**: A file that provides metadata for the app.
    - **robots.txt**: A file that tells web crawlers which pages to crawl.
  - **README.md**: A file that provides information about the project.
  - **server/**: Contains server-side code and configurations.
    - **.env**: Environment variables for the server.
    - **config/**: Configuration files for the server.
    - **middleware/**: Middleware functions for the server.
    - **models/**: Database models for the server.
    - **package.json**: Contains metadata about the server and its dependencies.
    - **routes/**: API routes for the server.
    - **scripts/**: Scripts for the server.
    - **src/**: Source code for the server.
    - **testEmail.ts**: A script for testing email functionality.
    - **tsconfig.json**: TypeScript configuration file for the server.
  - **src/**: Contains the source code for the client-side application.
    - **App.css**: CSS file for the main App component.
    - **App.test.tsx**: Test file for the main App component.
    - **...**: Other source files and components.
  - **tailwind.config.js**: Configuration file for Tailwind CSS.
  - **tsconfig.json**: TypeScript configuration file for the client-side application.

##Scheduling Flow##

1. User Interaction with the Form
The GetStartedFlow component manages a multi-step form where users provide information in several steps. The steps include selecting company size, choosing services, and scheduling an appointment.

2. Component Structure
The GetStartedFlow component uses several child components to handle different steps of the form:

CompanySizeStep: Collects information about the company size.
ServicesStep: Collects information about the services the user is interested in.
SchedulingStep: Collects information about the appointment time.
3. State Management
The component uses React's useState hook to manage the current step and form data:

currentStep: Tracks the current step of the form.
formData: Stores the collected data from each step.
4. Updating Form Data
The updateFormData function updates the formData state with the data collected from each step.

5. Handling Form Submission
Once the user completes all steps, the form data is typically submitted to the backend for processing.

Mapping the Flow
Here's a step-by-step mapping of the flow:

User Starts the Form:

The GetStartedFlow component is rendered.
The initial state is set with currentStep as 1 and formData as an empty object.
Step 1: Company Size:

The user selects the company size.
The updateFormData function is called to update the formData state with the selected company size.
The user clicks "Next" to proceed to the next step.
Step 2: Services:

The user selects the services they are interested in.
The updateFormData function is called to update the formData state with the selected services.
The user clicks "Next" to proceed to the next step.
Step 3: Scheduling:

The user selects an appointment time.
The updateFormData function is called to update the formData state with the selected appointment time.
The user clicks "Submit" to submit the form.
Form Submission:

The collected formData is sent to the backend for processing (e.g., saving to the database, sending email confirmation).

